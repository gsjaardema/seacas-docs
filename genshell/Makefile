# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.51 89/12/12 12:37:30 jim Exp $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#

###########################################################################
# Makefile generated from "Imake.tmpl" and </tmp/IIf.a06179>.
#
# Platform-specific parameters may be set in the appropriate .cf
# configuration files.  Site-wide parameters may be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
#
# If your C preprocessor doesn't define any unique symbols, you'll need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make Makefile", "make Makefiles", or "make World").
#
# If you absolutely can't get imake to work, you'll need to set the
# variables at the top of each Makefile as well as the dependencies at the
# bottom (makedepend will do this automatically).
#

###########################################################################
# platform-specific configuration parameters - edit hp.cf to change

# platform:  $XConsortium: hp.cf,v 1.24 89/12/10 11:57:02 rws Exp $
# operating system:  HP-UX 8.07

###########################################################################
# site-specific project configuration parameters - edit site.pdef to change

###########################################################################
# site-specific configuration parameters - edit site.def to change

# site:  SNLA Engineering Analysis Code HP, SNLA Albuquerque

# HP characteristics.  Should be overridden as necessary in
# platform-specific .cf file.

###########################################################################
# definitions common to all Makefiles - do not edit

           MFLAGS = -$(MAKEFLAGS)

           SYSTEM = HP
          LSYSTEM = `echo $(SYSTEM) | tr "[A-Z]" "[a-z]"`

            SHELL = /bin/sh

          DESTDIR = /usr/local/eng_sci/struct
              TOP = /usr/local/eng_sci/struct/ACCESS
      CURRENT_DIR = .

   ALLOCA_DEFINES = -DNEEDS_ALLOCA

               AR = ar clr
  BOOTSTRAPCFLAGS =
               CC = cc
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
          INSTALL = sh $(SCRIPTSRC)/install.sh
               LD = ld
             LINT = lint
      LINTLIBFLAG = -o
         LINTOPTS = -ax -DSYSV
               LN = ln -s
             MAKE = make
               MV = mv -f
               CP = cp
           RANLIB = /bin/true
  RANLIBINSTFLAGS =
               RM = rm -f
     STD_INCLUDES =
  STD_CPP_DEFINES = -DSYSV
      STD_DEFINES = -DSYSV -Dunix -D_HPUX_SOURCE -Dhpux -Aa
 EXTRA_LOAD_FLAGS =
  EXTRA_LIBRARIES = -lvec
             TAGS = ctags

     INSTBINFLAGS = -m 0755 -o gdsjaar -g seacas
     INSTUIDFLAGS = -m 04755 -o gdsjaar -g seacas
     INSTGIDFLAGS = -m 02755 -o gdsjaar -g seacas
    INSTUGIDFLAGS = -m 06755 -o gdsjaar -g seacas
     INSTLIBFLAGS = -m 0664 -o gdsjaar -g seacas
  INSTSCRIPTFLAGS = -m 0755 -o gdsjaar -g seacas
     INSTINCFLAGS = -m 0444 -o gdsjaar -g seacas
     INSTDATFLAGS = -m 0444 -o gdsjaar -g seacas
     INSTMANFLAGS = -m 0444 -o gdsjaar -g seacas

      INCLUDEPATH = $(DESTDIR)/usr/include

   EXTRA_INCLUDES = ${PROJECT_INCLUDES}
      ALLINCLUDES = $(EXTRA_INCLUDES) $(INCLUDES) $(STD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(DEFINES)
           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS)

        LIBMANDIR = LibmanDir
        SYSMANDIR = SysmanDir

              EQN = eqn
        MANMACROS = -man
         MSMACROS = -ms
              PIC = pic
          PRINTER = lpr
           SOELIM = ${SOELIMSRC}/soelim
              TBL = tbl
            TROFF = troff
            NROFF = nroff

      CDEBUGFLAGS = -O
        CCOPTIONS =

           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *.a .emacs_* tags TAGS make.log MakeOut *~

###########################################################################
# project-specific configuration parameters
# Edit Project.ptmpl to change

###########################################################################
# project-specific project configuration parameters

###########################################################################
# Section 1.  Cpp symbols

# Project identfication - name and release level

# Project-specific system characteristics

# Project-specific system directories and file locations

# Project-specific include file directories

# Configuration tools (files and directories)

# Extra commands required

# Extra libraries required

###########################################################################
# Section 2.  Makefile symbols; needs to be coordinated with Imake.tmpl

# Project identfication - name and release level

# Project-specific system characteristics

# Project-specific system directories and file locations

        NETCDFSRC = netcdf

     LIBRARIESSRC = libraries
       PREPOSTSRC = prepost
     TRANSLATESRC = translate
      GRAPHICSSRC = graphics
       SCRIPTSSRC = scripts

      ANALYSISSRC = analysis

          SVDISRC = svdi

# Translator Subdirectories
       ALGEBRASRC = algebra
         CONEXSRC = conex
        EXOCTHSRC = exocth
        EXOEXOSRC = exoexo
        EXOSYMSRC = exosym
        EXOTRCSRC = exotrc
        EXOTXTSRC = exotxt
        SEAEXOSRC = seaexo
        TXTEXOSRC = txtexo
           XDRSRC = xdr

       PATEXO2SRC = patexo2
      EXO1EXO2SRC = exo1exo2
      EXO2EXO1SRC = exo2exo1

        PATEXOSRC = patexo
        EXOPATSRC = exopat

# Graphics Subdirectories
          BLOTSRC = blot
         FASTQSRC = fastq
         FONTSSRC = fonts
         GRAPHSRC = graph
           PLTSRC = plt
   VDI_DRIVERSSRC = vdi_drivers

# Library Sudirectories
         SUPESSRC = supes
        SUPLIBSRC = suplib

      EXODUSIISRC = exodusii

         XHELPSRC = xhelp

# Pre- and Post-processing Subdirectories
       APREPROSRC = aprepro
         GEN3DSRC = gen3d
      GENSHELLSRC = genshell
         GJOINSRC = gjoin
        GREPOSSRC = grepos
         GROPESRC = grope
       NUMBERSSRC = numbers

# Analysis Subdirectories
         JAC2DSRC = jac2d
         JAC3DSRC = jac3d
        JACQ3DSRC = jacq3d
      PRONTO2DSRC = pronto2d
      PRONTO3DSRC = pronto3d
        SANCHOSRC = sancho
        SANTOSSRC = santos
      SANTOS3DSRC = santos3d
       MERLIN2SRC =
        SUBWAYSRC =
      COYOTEIISRC =

            SUPES = -Wl,-L$(USRLIBDIR) -lsupes
           SUPLIB = -Wl,-L$(USRLIBDIR) -lsuplib
              PLT = $(BINDIR)/plt.o

         EXOIIINC = $(INCDIR)
        NETCDFINC = $(INCDIR)

           NETCDF = -Wl,-L$(USRLIBDIR) -lnetcdf
           EXOIIC = -Wl,-L$(USRLIBDIR) -lexoIIc
         EXOIIFOR = -Wl,-L$(USRLIBDIR) -lexoIIfor

           ABALIB = AbaqusLibrary

# Project-specific include file directories

# Configuration tools (files and directories)

# Extra commands required

# Extra libraries required

###########################################################################
# Standard Project configuration parameters
# Edit Project.tmpl to change

###########################################################################
# Standard project configuration parameters

###########################################################################
# Section 1.  Cpp symbols

# Project identfication - name and release level

# Project-specific system characteristics

# Project-specific system directories and file locations

# Project-specific include file directories

# Configuration tools (files and directories)

# Extra libraries required

###########################################################################
# Section 2.  Makefile symbols; needs to be coordinated with Imake.tmpl

# Project identfication - name and release level

      PROJECTNAME = "SNLA ACCESS"
   PROJECTRELEASE = "0.1"

# Project-specific system characteristics

         F77DEBUG = -g
      F77CPPFLAGS =
    F77DEFOPTIONS =
    F77DEBUGFLAGS = -O
    F77PAROPTIONS = -O
   F77STATICFLAGS = -K

       F77OPTIONS = $(F77DEFOPTIONS) $(INCLUDES)
        FPARFLAGS = $(F77PAROPTIONS) $(F77DEBUGFLAGS)

           FFLAGS = $(F77OPTIONS) $(F77DEBUGFLAGS) -I$(EXOIIINC) -I$(NETCDFINC)

          FLDLIBS = $(EXTRA_LIBRARIES)
       FLDOPTIONS = $(F77DEBUGFLAGS) $(F77OPTIONS)

   ALLOCA_DEFINES = -DNEEDS_ALLOCA

# Project-specific system directories and file locations

          PATHSEP = /

           BINDIR = $(DESTDIR)/bin
        SCRIPTDIR = $(DESTDIR)/etc
           INCDIR = $(DESTDIR)/inc
           MANDIR = $(DESTDIR)/man
          SVDIDIR = /usr/local/graphics
           TMPDIR = /usr/tmp
        USRLIBDIR = $(DESTDIR)/lib

# Project-specific system directories and file locations

# These are all defined in Project.ptmpl -- Used to control what
# is in distribution and what will get built.

# Project-specific include file directories

       INCLUDESRC = .

 PROJECT_INCLUDES = -I${INCLUDESRC}

# Configuration tools (files and directories)

    STDCONFIGPATH = /usr/local/eng_sci/struct
     STDCONFIGDIR = ${STDCONFIGPATH}/config
    PROJCONFIGDIR = ${TOP}/config

        CONFIGSRC = $(TOP)/config
         IMAKESRC = $(CONFIGSRC)

          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
        DEPENDSRC = $(UTILSRC)/makedepend
          MSUBSRC = $(UTILSRC)/msub
        SOELIMSRC = $(UTILSRC)/soelim

            IMAKE = $(IMAKESRC)/imake
           DEPEND = $(DEPENDSRC)/makedepend
             MSUB = $(MSUBSRC)/msub
        MKDIRHIER = /bin/sh $(SCRIPTSRC)/mkdirhier.sh

    IMAKE_DEFINES =
         IRULESRC = $(CONFIGSRC)
        MACROFILE = hp.cf

        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(PROJCONFIGDIR) -I$(STDCONFIGDIR) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules $(IRULESRC)/Project.tmpl $(IRULESRC)/$(MACROFILE) $(IRULESRC)/site.def Imakefile $(EXTRA_CONFIGFILES)

# Configuration tools (files and directories)

# Extra commands required

               FC = f77
            BISON = bison -dty
             FLEX = flex -I -C
            DEBUG = xdb
           UPDATE = update

# Extra libraries required

 # EXOXDR and XDREXO use the xdr functions of rpc.
           RPCLIB =

###########################################################################
# Project-specific imake rules
# Edit Imake.prules to change

###########################################################################
# Standard imake rules
# Edit Imake.rules to change

###########################################################################
# Imake rules.
# Hacked from X Window HP R3 and R4 imake rules.

###########################################################################
# start of Imakefile

# This Imakefile creates the encapsulated postscript files for the
# figures in the GenShell manual.  Convert this Imakefile to a
# Makefile using 'accmkmf' and then type 'make eps' to generate the
# eps files.  'make clean' will remove all generated files.
#
# All input files are created by this Imakefile.

eps: warp-point.eps warp-yaxis-m.eps warp-yaxis-v.eps spline-sphere.eps
eps: spline-xsweep.eps spline-ysweep.eps warp-ellipse.eps

.SUFFIXES: .fsq .g
.fsq.g:
	$(RM) $@
	fastq  -mesh=$*.g $*.fsq

.SUFFIXES: .ps .eps

.ps.eps:
	pstoepsi $*.ps $*.eps

all:: translate.gs

clean::
	$(RM) translate.gs
translate.gs::     s.g  in.gsh
	 genshell  -aprepro=\(T=1\)     s.g translate.gs < in.gsh

all:: warp-point.gs

clean::
	$(RM) warp-point.gs
warp-point.gs::    s.g  in.gsh
	 genshell  -aprepro=\(WP=1\)    s.g warp-point.gs < in.gsh

all:: warp-yaxis-m.gs

clean::
	$(RM) warp-yaxis-m.gs
warp-yaxis-m.gs::  s.g  in.gsh
	 genshell  -aprepro=\(WYM=1\)  s.g warp-yaxis-m.gs < in.gsh

all:: warp-yaxis-v.gs

clean::
	$(RM) warp-yaxis-v.gs
warp-yaxis-v.gs::  s.g  in.gsh
	 genshell  -aprepro=\(WYV=1\)  s.g warp-yaxis-v.gs < in.gsh

all:: warp-ellipse.gs

clean::
	$(RM) warp-ellipse.gs
warp-ellipse.gs::  s.g  in.gsh
	 genshell  -aprepro=\(WE=1\)  s.g warp-ellipse.gs < in.gsh

all:: spline-sphere.gs

clean::
	$(RM) spline-sphere.gs
spline-sphere.gs:: s.g  in.gsh
	 genshell  -aprepro=\(SS=1\) s.g spline-sphere.gs < in.gsh

all:: spline-xsweep.gs

clean::
	$(RM) spline-xsweep.gs
spline-xsweep.gs:: s.g  in.gsh
	 genshell  -aprepro=\(SX=1\) s.g spline-xsweep.gs < in.gsh

all:: spline-ysweep.gs

clean::
	$(RM) spline-ysweep.gs
spline-ysweep.gs:: s.g  in.gsh
	 genshell  -aprepro=\(SY=1\) s.g spline-ysweep.gs < in.gsh

warp-point.ps::  warp-point.g    blot.inp
	echo "7" | blot   -hardcopy warp-point.ps -device    cps -input    blot.inp  warp-point.g

clean::
	$(RM) warp-point.ps

warp-yaxis-m.ps::  warp-yaxis-m.g  blot.inp
	echo "7" | blot   -hardcopy warp-yaxis-m.ps -device  cps -input  blot.inp  warp-yaxis-m.g

clean::
	$(RM) warp-yaxis-m.ps

warp-yaxis-v.ps::  warp-yaxis-v.g  blot.inp
	echo "7" | blot   -hardcopy warp-yaxis-v.ps -device  cps -input  blot.inp  warp-yaxis-v.g

clean::
	$(RM) warp-yaxis-v.ps

warp-ellipse.ps::  warp-ellipse.g  blot.inp
	echo "7" | blot   -hardcopy warp-ellipse.ps -device  cps -input  blot.inp  warp-ellipse.g

clean::
	$(RM) warp-ellipse.ps

spline-sphere.ps::  spline-sphere.g blot.inp
	echo "7" | blot   -hardcopy spline-sphere.ps -device cps -input blot.inp  spline-sphere.g

clean::
	$(RM) spline-sphere.ps

spline-xsweep.ps::  spline-xsweep.g blot.inp
	echo "7" | blot   -hardcopy spline-xsweep.ps -device cps -input blot.inp  spline-xsweep.g

clean::
	$(RM) spline-xsweep.ps

spline-ysweep.ps::  spline-ysweep.g blot.inp
	echo "7" | blot   -hardcopy spline-ysweep.ps -device cps -input blot.inp  spline-ysweep.g

clean::
	$(RM) spline-ysweep.ps

all:: warp-point.g

clean::
	$(RM) warp-point.g
warp-point.g::    warp-point.gs   translate.gs  warp-point.gji
	gjoin <  warp-point.gji

all:: warp-yaxis-m.g

clean::
	$(RM) warp-yaxis-m.g
warp-yaxis-m.g::  warp-yaxis-m.gs translate.gs  warp-yaxis-m.gji
	gjoin <  warp-yaxis-m.gji

all:: warp-yaxis-v.g

clean::
	$(RM) warp-yaxis-v.g
warp-yaxis-v.g::  warp-yaxis-v.gs translate.gs  warp-yaxis-v.gji
	gjoin <  warp-yaxis-v.gji

all:: warp-ellipse.g

clean::
	$(RM) warp-ellipse.g
warp-ellipse.g::  warp-ellipse.gs translate.gs  warp-ellipse.gji
	gjoin <  warp-ellipse.gji

all:: spline-sphere.g

clean::
	$(RM) spline-sphere.g
spline-sphere.g:: spline-sphere.gs translate.gs  spline-sphere.gji
	gjoin <  spline-sphere.gji

all:: spline-xsweep.g

clean::
	$(RM) spline-xsweep.g
spline-xsweep.g:: spline-xsweep.gs translate.gs  spline-xsweep.gji
	gjoin <  spline-xsweep.gji

all:: spline-ysweep.g

clean::
	$(RM) spline-ysweep.g
spline-ysweep.g:: spline-ysweep.gs translate.gs  spline-ysweep.gji
	gjoin <  spline-ysweep.gji

clean::
	$(RM) *.gji blot.inp *.eps in.gsh s.fsq s.g

warp-point.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "warp-point.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "warp-point.g" >>$@

warp-yaxis-m.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "warp-yaxis-m.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "warp-yaxis-m.g" >>$@

warp-yaxis-v.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "warp-yaxis-v.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "warp-yaxis-v.g" >>$@

warp-ellipse.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "warp-ellipse.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "warp-ellipse.g" >>$@

spline-sphere.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "spline-sphere.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "spline-sphere.g" >>$@

spline-xsweep.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "spline-xsweep.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "spline-xsweep.g" >>$@

spline-ysweep.gji: Imakefile
	$(RM) $@
	echo "translate.gs" >$@
	echo "spline-ysweep.gs" >>$@
	echo "equiv end" >>$@
	echo "finish" >>$@
	echo "spline-ysweep.g" >>$@

blot.inp: Imakefile
	$(RM) $@
	echo "DETOUR" >$@
	echo "Rotate x -90 x 20 y 20" >>$@
	echo "qa off" >>$@
	echo "legend off" >>$@
	echo "hard" >>$@
	echo "exit" >>$@

in.gsh: Imakefile
	$(RM) $@
	echo "{ifdef(T)}" >$@
	echo "Translate 1" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(WP)}" >>$@
	echo "Warp Point 1 2" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(WYM)}" >>$@
	echo "Warp YAXIS MAP 1 1" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(WYV)}" >>$@
	echo "Warp YAXIS VERTICAL 1 1" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(WE)}" >>$@
	echo "Warp Ellipse 1 2 3 4" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(SS)}" >>$@
	echo "Spline 0.1" >>$@
	echo "Angular" >>$@
	echo "FRONT" >>$@
	echo " 0.0	1.0" >>$@
	echo "15.0	1.0" >>$@
	echo "30.0	1.0" >>$@
	echo "45.0	1.0" >>$@
	echo "60.0	1.0" >>$@
	echo "75.0	1.0" >>$@
	echo "90.0	1.0" >>$@
	echo "left	0.0" >>$@
	echo "right	0.0" >>$@
	echo "spherical" >>$@
	echo "end" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(SX)}" >>$@
	echo "Spline 0.1" >>$@
	echo "Angular" >>$@
	echo "FRONT" >>$@
	echo " 0.0	1.0" >>$@
	echo "15.0	1.0" >>$@
	echo "30.0	1.0" >>$@
	echo "45.0	1.0" >>$@
	echo "60.0	1.0" >>$@
	echo "75.0	1.0" >>$@
	echo "90.0	1.0" >>$@
	echo "left	0.0" >>$@
	echo "right	0.0" >>$@
	echo "xsweep" >>$@
	echo "end" >>$@
	echo "{endif}" >>$@
	echo "{ifdef(SY)}" >>$@
	echo "Spline 0.1" >>$@
	echo "FRONT" >>$@
	echo " 0.0	0.4" >>$@
	echo " 0.5	0.2" >>$@
	echo " 1.0	0.4" >>$@
	echo "left	0.0" >>$@
	echo "right	0.0" >>$@
	echo "ysweep" >>$@
	echo "end" >>$@
	echo "{endif}" >>$@
	echo "EXIT" >>$@

s.fsq: Imakefile
	$(RM) $@
	echo "Title">$@
	echo " Square mesh for genshell examples">>$@
	echo "point	1	0.0 	0.0">>$@
	echo "point	2	1.0	0.0">>$@
	echo "point	3	1.0	1.0">>$@
	echo "point	4	0.0	1.0">>$@
	echo "">>$@
	echo "line	1 str 1 2 0 10">>$@
	echo "line	2 str 2 3 0 10">>$@
	echo "line	3 str 3 4 0 10">>$@
	echo "line	4 str 4 1 0 10">>$@
	echo "">>$@
	echo "region 1 1 -1 -2 -3 -4">>$@
	echo "exit">>$@

###########################################################################
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) \#*

Makefile:: $(IMAKE)

$(IMAKE):
	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS=$(BOOTSTRAPCFLAGS); fi; \
	echo "okay, continuing in $(CURRENT_DIR)")

Makefile::
	-@if [ -f Makefile ]; then \
	echo "	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak"; \
	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR) imakeflags

tags::
	$(TAGS) -w *.[chfF]
	$(TAGS) -xw *.[chfF] > TAGS

###########################################################################
# empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

Makefiles::

depend::

###########################################################################
# dependencies generated by makedepend

